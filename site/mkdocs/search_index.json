{
    "docs": [
        {
            "location": "/",
            "text": "Overview\n\n\naccounting\n is a tiny Python package for number, money and currency parsing/formatting. It's lightweight, fully localisable, and has no dependencies.\n\n\nVisit the documentation site at: \nhttp://pythonhosted.org/accounting/\n\n\nFeatures custom output formats, parsing/unformatting of numbers, easy localisation and spreadsheet-style column formatting (to line up symbols and decimals).\n\n\nMaintained by \nBernard Ojengwa\n and inspired by \naccounting.js\n.\n\n\nInstallation / Usage\n\n\nTo install use pip:\n\n\n$ pip install accounting\n\n\n\nor\n\n\n$ easy_install accounting\n\n\n\nOr clone the repo:\n\n\n$ git clone https://github.com/ojengwa/accounting.git\n$ python setup.py install\n\n\n\nContributing\n\n\nPlease checkout or download the latest stable tag. \nBug reports\n and pull requests are welcome.\n\n\nExample\n\n\nTBD",
            "title": "Home"
        },
        {
            "location": "/#overview",
            "text": "accounting  is a tiny Python package for number, money and currency parsing/formatting. It's lightweight, fully localisable, and has no dependencies.  Visit the documentation site at:  http://pythonhosted.org/accounting/  Features custom output formats, parsing/unformatting of numbers, easy localisation and spreadsheet-style column formatting (to line up symbols and decimals).  Maintained by  Bernard Ojengwa  and inspired by  accounting.js .",
            "title": "Overview"
        },
        {
            "location": "/#installation-usage",
            "text": "To install use pip:  $ pip install accounting  or  $ easy_install accounting  Or clone the repo:  $ git clone https://github.com/ojengwa/accounting.git\n$ python setup.py install",
            "title": "Installation / Usage"
        },
        {
            "location": "/#contributing",
            "text": "Please checkout or download the latest stable tag.  Bug reports  and pull requests are welcome.",
            "title": "Contributing"
        },
        {
            "location": "/#example",
            "text": "TBD",
            "title": "Example"
        },
        {
            "location": "/license/",
            "text": "The MIT License (MIT)\n\n\nCopyright (c) 2016 Ojengwa Bernard\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
            "title": "License"
        },
        {
            "location": "/test/",
            "text": "accounting.js: JavaScript number and currency formatting library\n\n\n\n\n\n\n    \n\n        \naccounting.js\n\n        \naccounting.js\n is a tiny JavaScript library by \nOpen Exchange Rates\n, providing simple and advanced number, money and currency formatting.\n\n\n    <p>Features custom output formats, parsing/unformatting of numbers, easy localisation and spreadsheet-style column formatting (to line up symbols and decimals).</p>\n\n    <p>It's lightweight, has no dependencies and is suitable for all client-side and server-side JavaScript applications.</p>\n\n    <p><a href=\"http://twitter.com/share\" class=\"twitter-share-button\" data-count=\"horizontal\" data-via=\"josscrowcroft\" data-url=\"http://openexchangerates.github.io/accounting.js\" data-text=\"accounting.js - JavaScript library for money/currency formatting\">Tweet</a> &nbsp; <g:plusone size=\"medium\"></g:plusone></p>\n    <ul>\n        <li><a href=\"#methods\" title=\"library methods overvew\">methods &amp; examples</a>\n        <li><a href=\"#demo\" title=\"demo\">demo</a>\n        <li><a href=\"#instructions\" title=\"instructions\">instructions</a>\n        <li><a href=\"#documentation\" title=\"documentation\">documentation</a>\n        <li><a href=\"#roadmap\" title=\"roadmap\">roadmap</a>\n        <li><a href=\"#support\" title=\"support\">feedback / support</a>\n        <li><a href=\"#download\" title=\"download\">download</a>\n        <li><a href=\"#links\" title=\"links\">links</a>\n    </ul>\n</section>\n\n<section id=\"methods\">\n    <h2>Library Methods</h2>\n\n    <h4><strong>formatMoney()</strong> - format any number into currency</h4>\n\n    <p>The most basic library function for formatting numbers as money values, with customisable currency symbol, precision (decimal places), and thousand/decimal separators:</p>\n    <pre class=\"prettyprint lang-js\">// Default usage:\n\n\n\naccounting.formatMoney(12345678); // $12,345,678.00\n\n\n// European formatting (custom symbol and separators), can also use options object as second parameter:\naccounting.formatMoney(4999.99, \"\u20ac\", 2, \".\", \",\"); // \u20ac4.999,99\n\n\n// Negative values can be formatted nicely:\naccounting.formatMoney(-500000, \"\u00a3 \", 0); // \u00a3 -500,000\n\n\n// Simple \nformat\n string allows control of symbol position (%v = value, %s = symbol):\naccounting.formatMoney(5318008, { symbol: \"GBP\",  format: \"%v %s\" }); // 5,318,008.00 GBP\n\n\n    <h4><strong>formatColumn()</strong> - format a list of values for column-display</h4>\n\n    <p>This table demonstrates how <strong>accounting.js</strong> can take a list of numbers and money-format them with padding to line up currency symbols and decimal places</p>\n    <p>In order for the padded spaces to render correctly, the containing element must be CSS styled with <code>white-space: pre</code> (pre-formatted) - otherwise the browser will squash them into single spaces.</p>\n\n    <table id=\"demo-table\">\n        <thead>\n            <tr>\n                <th>Original Number:</th>\n                <th>With accounting.js:</th>\n                <th>Different settings:</th>\n                <th>European format:</th>\n                <th>Symbol after value:</th>\n            </tr>\n        </thead>\n        <tbody></tbody>\n    </table>\n    <pre class=\"prettyprint lang-js\">// Format list of numbers for display:\n\n\n\naccounting.formatColumn([123.5, 3456.49, 777888.99, 12345678, -5432], \"$ \");\n\n\n    <h4><strong>formatNumber()</strong> - format a number with custom precision and localisation</h4>\n\n    <p>The base function of the library, which takes any number or array of numbers, runs <code>accounting.unformat()</code> to remove any formatting, and returns the number(s) formatted with separated thousands and custom precision:</p>\n    <pre class=\"prettyprint lang-js\">accounting.formatNumber(5318008); // 5,318,008\n\n\n\naccounting.formatNumber(9876543.21, 3, \" \"); // 9 876 543.210\n\n\n    <h4><strong>toFixed()</strong> - better rounding for floating point numbers</h4>\n\n    <p>Implementation of toFixed() that treats floats more like decimal values than binary, fixing inconsistent precision rounding in JavaScript (where some .05 values round up, while others round down):</p>\n    <pre class=\"prettyprint lang-js\">(0.615).toFixed(2); // \"0.61\"\n\n\n\naccounting.toFixed(0.615, 2); // \"0.62\"\n\n\n    <h4><strong>unformat()</strong> - parse a value from any formatted number/currency string</h4>\n\n    <p>Takes any number and removes all currency formatting. Aliased as <code>accounting.parse()</code></p>\n    <pre class=\"prettyprint lang-js\">accounting.unformat(\"&pound; 12,345,678.90 GBP\"); // 12345678.9</pre>\n</section>\n\n<section id=\"demo\">\n    <h2>Demo / Try it out</h2>\n\n\n    <h4>Money formatting:</h4>\n\n    <div class=\"well\">\n        <p>Enter any number into the box and choose currency. Uses <code>accounting.formatMoney()</code>:</p>\n        <p>\n            <select id=\"demo-number-symbol\">\n                <option value=\"$ \">$</option>\n                <option value=\"&pound; \">&pound;</option>\n                <option value=\"HK$ \">HK$</option>\n                <option data-locale=\"european\" value=\"&euro; \">&euro; </option>\n            </select>\n            <input type=\"text\" maxlength=\"20\" class=\"\" id=\"demo-number-value\" value=\"\" />\n        </p>\n        <p>Result: <strong><span id=\"demo-number-result\">$ 0.00</span></strong></p>\n    </div>\n\n\n    <h4>Column formatting:</h4>\n\n    <div class=\"well\">\n        <p>Edit the values in the table to see how <strong>formatColumn()</strong> keeps them aligned:</p>\n        <table id=\"demo-column\">\n            <tbody>\n                <tr>\n                    <td><input type=\"text\" value=\"1000000\" maxlength=\"20\" /></td>\n                    <td class=\"output\">$ 1,000,000.00</td>\n                    <td class=\"output2\">GBP 1,000,000</td>\n                </tr>\n                <tr>\n                    <td><input type=\"text\" value=\"-5000\" maxlength=\"20\" /></td>\n                    <td class=\"output\">$    -5,000.00</td>\n                    <td class=\"output2\">GBP   (5,000)</td>\n                </tr>\n                <tr>\n                    <td><input type=\"text\" value=\"0\" maxlength=\"20\" /></td>\n                    <td class=\"output\">$         0.00</td>\n                    <td class=\"output2\">GBP        --</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</section>\n\n\n<section id=\"instructions\">\n    <h2>Basic Instructions:</h2>\n\n    <p>1. Download the script and put it somewhere, then reference it in your HTML like so:</p>\n    <pre class=\"prettyprint\">&lt;script src=&quot;path/to/accounting.js&quot;&gt;&lt;/script&gt;\n\n\n\n<script type=\"text/javascript\">\n    // Library ready to use:\n    accounting.formatMoney(5318008);\n</script>\n\n\n    <p>2. See the documentation and source-code for full method/parameter information.</p>\n</section>\n\n\n<section id=\"documentation\">\n\n    <h2>Documentation</h2>\n\n    <p>Information on the parameters of each method. See <a href=\"#methods\" title=\"accounting.js library methods\">library methods</a> above for more examples. Optional parameters are in <code><em>[italics]</em></code>, with the default value indicated.</p>\n\n\n    <h4><strong>accounting.settings</strong></h4>\n\n    <pre class=\"prettyprint lang-js\">// Settings object that controls default parameters for library methods:\n\n\n\naccounting.settings = {\n    currency: {\n        symbol : \"$\",   // default currency symbol is '$'\n        format: \"%s%v\", // controls output: %s = symbol, %v = value/number (can be object: see below)\n        decimal : \".\",  // decimal point separator\n        thousand: \",\",  // thousands separator\n        precision : 2   // decimal places\n    },\n    number: {\n        precision : 0,  // default precision on numbers is 0\n        thousand: \",\",\n        decimal : \".\"\n    }\n}\n\n\n// These can be changed externally to edit the library's defaults:\naccounting.settings.currency.format = \"%s %v\";\n\n\n// Format can be an object, with \npos\n, \nneg\n and \nzero\n:\naccounting.settings.currency.format = {\n    pos : \"%s %v\",   // for positive values, eg. \"$ 1.00\" (required)\n    neg : \"%s (%v)\", // for negative values, eg. \"$ (1.00)\" \n[optional]\n\n    zero: \"%s  -- \"  // for zero values, eg. \"$  --\" \n[optional]\n\n};\n\n\n// Example using underscore.js - extend default settings (also works with $.extend in jQuery):\naccounting.settings.number = _.defaults({\n    precision: 2,\n    thousand: \" \"\n}, accounting.settings.number);\n\n\n    <h4><strong>accounting.formatMoney()</strong></h4>\n\n    <pre class=\"prettyprint lang-js\">// Standard usage and parameters (returns string):\n\n\n\naccounting.formatMoney(number\n,[symbol = \"$\"],[precision = 2],[thousand = \",\"],[decimal = \".\"],[format = \"%s%v\"]\n)\n\n\n// Second parameter can be an object:\naccounting.formatMoney(number\n, [options]\n)\n\n\n// Available fields in options object, matching \nsettings.currency\n:\nvar options = {\n    symbol : \"$\",\n    decimal : \".\",\n    thousand: \",\",\n    precision : 2,\n    format: \"%s%v\"\n};\n\n\n// Example usage:\naccounting.formatMoney(12345678); // $12,345,678.00\naccounting.formatMoney(4999.99, \"\u20ac\", 2, \".\", \",\"); // \u20ac4.999,99\naccounting.formatMoney(-500000, \"\u00a3 \", 0); // \u00a3 -500,000\n\n\n// Example usage with options object:\naccounting.formatMoney(5318008, {\n    symbol: \"GBP\",\n    precision: 0,\n    thousand: \"&middot\",\n    format: {\n        pos : \"%s %v\",\n        neg : \"%s (%v)\",\n        zero: \"%s  --\"\n    }\n});\n\n\n// Will recursively format an array of values:\naccounting.formatMoney([123, 456, [78, 9]], \"$\", 0); // [\"$123\", \"$456\", [\"$78\", \"$9\"]]\n\n\n    <h4><strong>accounting.formatColumn()</strong></h4>\n\n    <pre class=\"prettyprint lang-js\">// Standard usage and parameters (returns array):\n\n\n\naccounting.formatColumn(list\n, [symbol = \"$\"],[precision = 2],[thousand = \",\"],[decimal = \".\"],[format = \"%s%v\"]\n)\n\n\n// Second parameter can be an object (see formatNumber for available options):\naccounting.formatColumn(list, \n[options]\n)\n\n\n// Example usage (NB. use a space after the symbol to add arbitrary padding to all values):\nvar list = [123, 12345];\naccounting.formatColumn(list, \"$ \", 0); // [\"$    123\", \"$ 12,345\"]\n\n\n// List of numbers can be a multi-dimensional array (formatColumn is applied recursively):\nvar list = [[1, 100], [900, 9]];\naccounting.formatColumn(list); // [[\"$  1.00\", \"$100.00\"], [\"$900.00\", \"$  9.00\"]]\n\n\n    <h4><strong>accounting.formatNumber()</strong></h4>\n\n    <pre class=\"prettyprint lang-js\">// Standard usage and parameters (returns string):\n\n\n\naccounting.formatNumber(number\n, [precision = 0], [thousand = \",\"], [decimal = \".\"]\n)\n\n\n// Second parameter can also be an object matching \nsettings.number\n:\naccounting.formatNumber(number\n, [object]\n)\n\n\n// Example usage:\naccounting.formatNumber(9876543); // 9,876,543\naccounting.formatNumber(4999.99, 2, \".\", \",\"); // 4.999,99\n\n\n// Example usage with options object:\naccounting.formatNumber(5318008, {\n    precision : 3,\n    thousand : \" \"\n});\n\n\n// Will recursively format an array of values:\naccounting.formatNumber([123456, [7890, 123]]); // [\"123,456\", [\"7,890\", \"123\"]]\n\n\n    <h4><strong>accounting.toFixed()</strong></h4>\n\n    <pre class=\"prettyprint lang-js\">// Standard usage and parameters (returns string):\n\n\n\naccounting.toFixed(number\n, [precision = 0]\n);\n\n\n// Example usage:\naccounting.toFixed(0.615, 2); // \"0.62\"\n\n\n// Compare to regular JavaScript \nNumber.toFixed()\n method:\n(0.615).toFixed(2); // \"0.61\"\n\n\n    <h4><strong>accounting.unformat()</strong></h4>\n\n    <pre class=\"prettyprint lang-js\">// Standard usage and parameters (returns number):\n\n\n\naccounting.unformat(string\n, [decimal]\n);\n\n\n// Example usage:\naccounting.unformat(\"GBP \u00a3 12,345,678.90\"); // 12345678.9\n\n\n// If a non-standard decimal separator was used (eg. a comma) unformat() will need it in order to work out\n// which part of the number is a decimal/float:\naccounting.unformat(\"\u20ac 1.000.000,00\", \",\"); // 1000000\n\n\n</section>\n\n\n<section id=\"roadmap\">\n    <h2>Roadmap</h2>\n\n    <h4>Next Version:</h4>\n    <ul>\n        <li><s>Add more fine-grained control of formatting, with negatives and zero-values</s></li>\n        <li><s>Implement <code>map()</code> and type-checking helper methods to clean up API methods</s></li>\n        <li>Find performance bottlenecks and work on speed optimisations</li>\n        <li>Write more tests, docs and examples, add FAQ</li>\n        <li>Implement <a href=\"https://github.com/openexchangerates/accounting.js/issues/\" title=\"accounting.js issues\">feedback</a></li>\n    </ul>\n\n    <h4>Later:</h4>\n    <ul>\n        <li>Add padding parameter to override amount of space between currency symbol and value.</li>\n        <li>Add digit-grouping control, to allow eg. \"$10,0000\"</li>\n        <li>Add choice of rounding method for precision (up, down or nearest-neighbour).</li>\n        <li>Add several other general and excel-style money formatting methods.</li>\n        <li>Create NPM package, if there's demand for it.</li>\n        <li>Create wrapper for jQuery as a separate plugin (not in core) to allow eg. <code>$('td.accounting').formatMoney()</code></li>\n    </ul>\n\n    <p>See the <a href=\"https://github.com/openexchangerates/accounting.js/issues\" title=\"accounting.js issues\">Github Issues page</a> for currently active issues.</p>\n</section>\n\n<section id=\"support\">\n    <h2>Feedback / Support</h2>\n\n    <p>Please create issues on the <a href=\"https://github.com/openexchangerates/accounting.js\" title=\"accounting.js Github repository\">accounting.js Github repository</a> if you have feedback or need support, or <a href=\"mailto:info@openexchangerates.org\" title=\"Contact Open Exchange Rates\">contact Open Exchange Rates here</a>.</p>\n</section>\n\n<section id=\"download\">\n    <h2>Download</h2>\n\n    <ul>\n        <li><strong><a href=\"https://raw.github.com/openexchangerates/accounting.js/master/accounting.js\" title=\"accounting.js\">accounting.js</a></strong> - Latest version from Github (12kb)</li>\n        <li><strong><a href=\"https://raw.github.com/openexchangerates/accounting.js/master/accounting.min.js\" title=\"accounting.min.js\">accounting.min.js</a></strong> - Latest version from Github (3kb, minified)</li>\n        <li>Or check out the <a href=\"https://github.com/openexchangerates/accounting.js\" title=\"accounting.js Github repository\">accounting.js Github repository</a> for the full package.</li>\n    </ul>\n</section>\n\n<section id=\"links\">\n\n    <h2>Links</h2>\n    <p>accounting.js is maintained by <strong><a href=\"https://openexchangerates.org\" title=\"Open Exchange Rates free currency data API\" target=\"_blank\">Open Exchange Rates</a></strong> - the lightweight currency data API for startups, SMEs and Fortune 500s.</p>\n    <p>Feedback, support or questions? <strong><a href=\"mailto:info@openexchangerates.org\" title=\"Contact Open Exchange Rates\">Contact Open Exchange Rates</a></strong> for guidance.</p>\n    <p>Bugs, issues, suggestions or contributions? Please <strong><a href=\"https://github.com/openexchangerates/accounting.js\" title=\"accounting.js Github repository\">post them here</a></strong>.</p>\n    <p>accounting.js works great with <strong><a href=\"http://openexchangerates.github.com/money.js\" title=\"money.js - JavaScript currency conversion library\">money.js</a></strong> - the tiny (1kb) standalone JavaScript currency conversion library, for web & nodeJS</p>\n\n    <br />\n    <hr />\n    <p><a href=\"http://twitter.com/share\" class=\"twitter-share-button\" data-count=\"horizontal\" data-via=\"josscrowcroft\" data-url=\"http://openexchangerates.github.io/accounting.js\" data-text=\"accounting.js - JavaScript library for money/currency formatting\">Tweet</a> &nbsp; <g:plusone size=\"medium\"></g:plusone></p>\n</section>",
            "title": "Test"
        }
    ]
}